package com.udemy.springprojects.spring6webappudemy.domain;


import jakarta.persistence.*;

import java.util.HashSet;
import java.util.Set;

/*The Book class represents an entity for storing books details.
    It maps to a database table via JPA annotations.*/
@Entity// Marks this class as a JPA entity to map it to a database table
public class Book {
    /*The primary key for the Book entity. It is auto-generated by the database using the specified strategy.*/
    @Id// Specifies this field as the primary key
    @GeneratedValue(strategy = GenerationType.AUTO)
    private Long id;

    private String title;
    private String isbn;

   //Set<Author> field to represent the authors of a book
    //declare a field name(authors) which is meant to hold unique objects of type Author.Set defines a collection of unique elements

 //Owining side
    @ManyToMany
    @JoinTable(
    name="Author_Book",//Name of the join table
    joinColumns =@JoinColumn(name="book_id"),       //Specify the foreign key for the Book entity
    inverseJoinColumns = @JoinColumn(name="author_id")//Specify the foreign Key column for the Author entity
    )
    private Set<Author> authors=new HashSet<>();

    public Set<Author> getAuthors(){
        return authors;
    }

    public void setAuthors(Set<Author> authors_new){
        this.authors=authors_new;
    }

    @Override
    public String toString() {
        return "Book{" +
                "id=" + id +
                ", title='" + title + '\'' +
                ", isbn='" + isbn + '\'' +
                ", authors=" + authors +
                '}';
    }

    @Override
    public int hashCode() {
        return id!=null?id.hashCode():0;
    }

    @Override
    public boolean equals(Object o){
        //Check if the current object is being compared with itself
        if (this==o) return true;
        /*Ensure that passed object(o-already a object in the pointed bucket by HashMap)is not null and
        the passed object belongs to same class as the current object(this)*/

        if(id==null || getClass()!=o.getClass()) return false;


        /* At this point,we already know o is an instance of Book class(due to the previous check),so
        it's safe to cast it*/
        //why casting-safely casts the passed object(o) to the Book class. allowing access to its fields (like id,isbn,title) for comparison
       Book b=(Book) o;
       return id!=null && getId().equals(b.getId());
    }


    //getters and setters
    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public String getTitle(){
        return title;
    }

    public void setTitle(String title) {
        this.title = title;
    }

    public String getIsbn(){
        return isbn;
    }

    public void setIsbn(String isbn) {
        this.isbn = isbn;
    }


}
